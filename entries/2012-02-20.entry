date: 2012-02-20
todo:
 - status: started
   task: Get to the bottom of the rung issue with the RTFORCE
 - status: started
   task: Replicate figure 5 from Hopkins 2011
body: |
 Catchup
 ===============================================================================
 I have been seriously neglecting my research log for the past two weeks, due to
 some class-related hecticness.  I'm going to try and quickly record as much of
 what I did here.
 
 I primarily tried to determine the cause of the large values for iRung in Greg's
 g1536 simulation.  I've found that none of the three RT force options (RTF, 
 RTFORCE, or no RT flag) produce any stars at the first timestep ($z=99$). I've
 also found that RTF is just RTFORCE with another flag, RTDENSITY enabled.  A
 strange thing is happening with the RTF runs, where a large number of particles
 end up at the minimum (10K) temperature.  Why is that?  The other strange thing
 is that the smallest timesteps are occuring at lower, rather than higher 
 temperatures.  I am at a loss, and it appears James is as well.
 
 Daily Log
 ===============================================================================

 Tuesday
 -------------------------------------------------------------------------------
 Today I examined the results of the simple shocktube test.  The data from this
 experiment is stored at `Research/data/iRung_Test/shocktube` with 
 directories for each of the three RT force runs.  As the plot generated by 
 `Research/code/scripts/plot_shocktube_PdV.py` shows, there is no difference
 in the temperature vs. $PdV$ curves generated by the three RT runs.  This is
 good, in so far as James has tested the RT forces and found the same thing, so
 this means I didn't fuck things up with something I did.

 Wednesday
 -------------------------------------------------------------------------------
 I met again with James, and we examined a few more things.  James expected there
 to be a relation in the simulations:
 $$PdV \approx T\nabla\cdot v$$
 But there doesn't seem to be anything close to this relation in any of the plots
 I produced.  This could mean James' assumption is incorrect, or PdV,
 temperature, or divv is calculated in a strange way.  I've tried to get this
 linear(ish) relation by setting all of the initial particle velocities to zero,
 but this did not have any major effect.
 
 I also tried randomizing the temperatures (taking temperatures from one particle
 and putting them into another particle), but this doesn't seem to have any 
 effect either.  I'm going to check that my temperature randomization actually
 worked, as it may have not actually done anything.  UPDATE: it works fine, 
 nothing is up.
 
 James also suggested that it may be because of viscous effects that things are
 getting all screwy, so I added a define flag in gasoline's `master.c` 
 that replaces this:

    msr->param.dConstAlpha = 1.0;
 
 and
 
    msr->param.dConstBeta = 2.0;

 with:

     #ifndef NOVISC
            msr->param.dConstAlpha = 1.0;
     #else
            msr->param.dConstAlpha = 0.0;
     #endif

 and
 
     #ifndef NOVISC
            msr->param.dConstBeta = 2.0;
     #else
            msr->param.dConstBeta = 0.0;
     #endif

 This should serve to eliminate all viscous forces and turn the simulation into
 a perfect Euler fluid.
 
 I've also created a nice little script at `Research/code/scripts/examine`
 that will load up a tipsy file and start up a configured ipython instance to
 quickly play with it.
 
 Thursday
 -------------------------------------------------------------------------------
 I had a (sadly incorrect) revelation in the shower today that perhaps the 
 problem with RTDENSITY was that the code was grabbing darkmatter particles as
 neighbours, but that wasn't happening (I checked by adding an assertion that 
 all the particles used be `TYPE_GAS` in `smoothfcn.c`).
 
 The group meeting was sadly unproductive, but I did get a chance to see tipsy 
 in action a bit more.
 
 After the group meeting, I realized that a lot of my iRung test plots 
 incorrectly include darkmatter particles, and have remedied this.  I also have
 discovered that the density generated by gasoline's `nSteps == 0` dump
 tool are incorrect, as they do not jive with the densities in the tipsy files
 that they are pulled from.  After fixing all my plots, it has become clear that
 there is a correlation between the timestep and the temperature, and 
 anticorrelating the density and timestep.  This suggests that the two are 
 changing in unison, and the first thing that comes to mind when I think of this
 is adiabatic collapse:  the temperature is dropping really quickly (due to the
 efficient cooling shown in the plot of timestep versus $\dot E$.)  I decided
 to check if this is an adiabatic relationship by plotting $\log_{10} T$ against
 $\log_{10} \rho$, since:
 $$T^\alpha V = const$$
 $$\frac{T^\alpha}{\rho} = const $$
 $$\log_{10} T \propto \log_{10}\rho$$
 As the plotting script `Research/code/scripts/check_adiabat_DRTF.py` shows,
 there is a pretty linear relationship, supporting my adiabatic cooling 
 hypothesis.
 Friday}
 Had an excellent meeting with James this afternoon.  We determined that the 
 cause of strange temperatures/densities in the RT force runs was actually the
 geometry of the initial conditions in g1536.  The particles behaving badly are
 all located along the edge of the gas cloud, and are fucking up because they 
 are finding themselves with a total void on one side, and this is screwing with
 their properties.  This is good because it probably means that the physics 
 isn't wrong.  It is bad because it means that we can't fix the speed issue, and
 it might become a problem for explosions (high density gradients).  I will 
 probably want to blow something up by building a big periodic box, and then 
 giving some particle absurdly high energy.
 
 I've restarted the DRTF run of g1536 because James suggested that using 32
 rather than 64 neighbors may be the cause of some of our weirdness.  I've 
 switched the parameter file over to 64 neighbours in `DRTF_64N` by changing
 the parameter file option to `nSmooth = 64`.  We'll see what this does for
 our timesteps.
 
 
 I've also downloaded Oscar Agertz' disk comparison initial conditions.  They
 seem to be just plain ol' flat files with $10^4$, $10^5$, and $10^6$ gas 
 particle versions.  I don't know if gasoline can read these in, or if I need to 
 convert them to tipsy files.  I've emailed James asking him about this, but I
 don't think it will be a tragedy if I need to, and I can just write a script up
 in python wityh pynbody if I need to.  I need to learn how to make initial 
 conditions anyway, this might be a valuable excercise for me.
